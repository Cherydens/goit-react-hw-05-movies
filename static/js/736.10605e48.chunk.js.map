{"version":3,"file":"static/js/736.10605e48.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/movieApiService.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastContainer = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 12px;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const CastCard = styled.li`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\nexport const NoCastContainer = styled.div`\n  padding: 24px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCastById } from 'services/movieApiService';\nimport { CastCard, CastContainer, NoCastContainer } from './Cast.styled';\nimport noPhoto from '../../images/no-photo.jpg';\nimport Loader from 'components/Loader/Loader';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    if (!movieId) return;\n\n    const getMovieById = async id => {\n      setStatus('pending');\n      try {\n        const { cast } = await fetchMovieCastById(id);\n        if (cast.length === 0) {\n          setStatus('notFound');\n          return;\n        }\n        setCast(cast);\n        setStatus('resolved');\n      } catch (error) {\n        console.error(error.message);\n        setStatus('rejected');\n      }\n    };\n\n    getMovieById(movieId);\n  }, [movieId]);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'resolved' && (\n        <CastContainer>\n          {cast.map(({ credit_id, name, profile_path, character }) => (\n            <CastCard key={credit_id}>\n              <img\n                src={\n                  profile_path\n                    ? [`https://image.tmdb.org/t/p/w500${profile_path}`]\n                    : noPhoto\n                }\n                alt={name}\n                width={120}\n              />\n              {name && <p>{name}</p>}\n              {character && <p>Character: {character}</p>}\n            </CastCard>\n          ))}\n        </CastContainer>\n      )}\n      {status === 'notFound' && (\n        <NoCastContainer>\n          We don't have any cast for this movie.\n        </NoCastContainer>\n      )}\n      {status === 'rejected' && <div>Ooops...... Something went wrong!</div>}\n    </>\n  );\n}\n","import axios from 'axios';\n\n// const TOKEN =\n//   'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1NTc5NmYxNzM4NzI3OTg1NWM3MjBiMjdmNDljMjVmMSIsInN1YiI6IjY0N2Y3MDYzNzFmZmRmMDEwYzg3YWIzOCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.9AzF80qawQzmYwfptJjDK5gSiKy9M6ZEOpq2I4PFWtg';\nconst API_KEY = '55796f17387279855c720b27f49c25f1';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\naxios.defaults.baseURL = BASE_URL;\naxios.defaults.headers.common['Authorization'] = API_KEY;\n\nconst TRENDING_DAY_ENDPOINT = '/trending/movie/day';\nconst TRENDING_WEEK_ENDPOINT = '/trending/movie/week';\nconst UPCOMING_ENDPOINT = '/movie/upcoming';\nconst BY_ID_ENDPOINT = '/movie';\nconst SEARCH_QUERY_ENDPOINT = '/search/movie';\nconst GENRE_ENDPOINT = '/genre/movie/list';\n\nconst LANGUAGE = 'en-US';\nconst ADULT = 'false';\n\n/**\n * Отримує трендові фільми дня\n * @param {String || Number} page\n * @returns {Promise} response data\n */\nasync function fetchDayTrends(page = 1) {\n  const response = await axios.get(\n    `${BASE_URL}${TRENDING_DAY_ENDPOINT}?api_key=${API_KEY}&page=${page}&language=${LANGUAGE}`\n  );\n  return response.data;\n}\n\n/**\n * Отримує трендові фільми тижня\n * @param {String || Number} page\n * @returns {Promise} response data\n */\nasync function fetchWeekTrends(page = 1) {\n  const response = await axios.get(\n    `${BASE_URL}${TRENDING_WEEK_ENDPOINT}?api_key=${API_KEY}&page=${page}&language=${LANGUAGE}`\n  );\n  return response.data;\n}\n\n/**\n * Отримує нові фільми\n * @param {String || Number} page\n * @returns {Promise} response data\n */\nasync function fetchUpcomingThisMonth(page = 1) {\n  const response = await axios.get(\n    `${BASE_URL}${UPCOMING_ENDPOINT}?api_key=${API_KEY}&page=${page}&language=${LANGUAGE}`\n  );\n  return response.data;\n}\n\n/**\n * Отримує фільм за ID\n * @param {String} id\n * @returns {Promise} response data\n */\nasync function fetchMovieById(id) {\n  const response = await axios.get(\n    `${BASE_URL}${BY_ID_ENDPOINT}/${id}?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  return response.data;\n}\n\n/**\n * Отримує акторів до фільму за ID\n * @param {String} id\n * @returns {Promise} response data\n */\nasync function fetchMovieCastById(id) {\n  const response = await axios.get(\n    `${BASE_URL}${BY_ID_ENDPOINT}/${id}/credits?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  return response.data;\n}\n/**\n * Отримує обзори до фільму за ID\n * @param {String} id\n * @returns {Promise} response data\n */\nasync function fetchMovieReviewsById(id) {\n  const response = await axios.get(\n    `${BASE_URL}${BY_ID_ENDPOINT}/${id}/reviews?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  return response.data;\n}\n\n/**\n * Отримує фільми за пошуковим запитом\n * @param {String} searchQuery\n * @param {String || Number} page\n * @returns {Promise} response data\n */\nasync function fetchMovieBySearchQuery(searchQuery, page = 1) {\n  const response = await axios.get(\n    `${BASE_URL}${SEARCH_QUERY_ENDPOINT}?query=${searchQuery}&api_key=${API_KEY}&page=${page}&include_adult=${ADULT}&language=${LANGUAGE}`\n  );\n  return response.data;\n}\n\n/**\n * Отримує фільм за пошуковим запитом та роком\n * @param {String} searchQuery\n * @param {String || Number} year\n * @param {String || Number} page\n * @returns {Promise} response data\n */\nasync function fetchMovieBySearchQueryAndYear(searchQuery, year, page = 1) {\n  const response = await axios.get(\n    `${BASE_URL}${SEARCH_QUERY_ENDPOINT}?query=${searchQuery}&primary_release_year=${year}&page=${page}&api_key=${API_KEY}&include_adult=${ADULT}&language=${LANGUAGE}`\n  );\n  return response.data;\n}\n\n/**\n * Отримує відео до фільму за ID\n * @param {String} id\n * @returns {Promise} response data\n */\nasync function fetchMovieVideosById(id) {\n  const response = await axios.get(\n    `${BASE_URL}${BY_ID_ENDPOINT}/${id}/videos?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  return response.data;\n}\n\n/**\n * Отримує перелік жанрів\n * @returns {Promise} response data\n\n */\nasync function fetchGenresList() {\n  const response = await axios.get(\n    `${BASE_URL}${GENRE_ENDPOINT}?api_key=${API_KEY}&language=${LANGUAGE}`\n  );\n  return response.data;\n}\n\nexport {\n  fetchDayTrends,\n  fetchWeekTrends,\n  fetchUpcomingThisMonth,\n  fetchMovieById,\n  fetchMovieBySearchQuery,\n  fetchMovieBySearchQueryAndYear,\n  fetchMovieVideosById,\n  fetchGenresList,\n  fetchMovieCastById,\n  fetchMovieReviewsById,\n};\n"],"names":["CastContainer","styled","CastCard","NoCastContainer","Cast","movieId","useParams","useState","cast","setCast","status","setStatus","useEffect","getMovieById","id","fetchMovieCastById","length","console","error","message","Loader","map","credit_id","name","profile_path","character","src","noPhoto","alt","width","API_KEY","BASE_URL","axios","TRENDING_DAY_ENDPOINT","BY_ID_ENDPOINT","SEARCH_QUERY_ENDPOINT","LANGUAGE","ADULT","fetchDayTrends","page","response","data","fetchMovieById","fetchMovieReviewsById","fetchMovieBySearchQuery","searchQuery"],"sourceRoot":""}